package com.atguigu.chapter05

object $02_MethodSample {

  /**
    * 方法定义的时候简化原则:
    *     1、如果使用方法体块表达式结果值作为方法的返回值,定义方法的时候返回值类型可以省略,scala会根据方法体块表达式的结果值推断返回值类型
    *           注意: 如果方法体中有return关键字,此时必须定义返回值类型
    *     2、如果方法体中只有一行语句,方法体的{}可以省略
    *     3、如果方法体不需要返回值,=可以省略 【=与{}不能同时省略】
    *     4、如果方法不需要参数,方法参数列表的()可以省略
    *         注意:
    *             1、如果定义方法的时候没有(),那么调用方法的时候也不能带上()
    *             2、如果定义方法的时候有(),那么调用方法的时候()可有可无
    *
    */
  def main(args: Array[String]): Unit = {

    println(sum2(10, 20))
    //1、如果定义方法的时候没有(),那么调用方法的时候也不能带上()
    hello2
    //2、如果定义方法的时候有(),那么调用方法的时候()可有可无
    hello()
    hello
  }

  /**
    * 方法标准定义形式
    * @param x
    * @param y
    * @return
    */
  def sum(x:Int,y:Int):Int = {
    x+y
  }

  /**
    * 1、如果使用方法体块表达式结果值作为方法的返回值,定义方法的时候返回值类型可以省略
    */
  def sum2(x:Int,y:Int) = {
    x+y
  }

  /**
    * 注意: 如果方法体中有return关键字,此时必须定义返回值类型
    */
  def sum3(x:Int,y:Int):Any = {
    if(y==0) return "hello"
    x/y
  }

  /**
    * 2、如果方法体中只有一行语句,方法体的{}可以省略
    */
  def sum4(x:Int,y:Int) = x+y

  /**
    * 3、如果方法体不需要返回值,=可以省略 【=与{}不能同时省略】
    */
  def sum5(x:Int,y:Int) {
    println(x+y)
  }

  /**
    * 方法标准定义形式
    */
  def hello():Unit = {

    println("Hello.....")
  }

  /**
    * 4、如果方法不需要参数,方法参数列表的()可以省略
    */
  def hello2 {
    println("Hello....")
  }
}
